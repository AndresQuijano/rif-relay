
/*
d1f57894  =>  initialize(address,bytes)

initialize(address token, bytes data) 
signature of function   : 4
token param             : 20
data                    : 56
-----------------------------

data is                 : 56
---------
signature of transfer   : 4
address of recipient    : 20
uint256 of amount       : 32
signature(4) + address(20) + data(signature()


Total calldatasize is: 4 + 20 + 56 = 80 bytes = 0x50


====================================================================================================================================================
                                                    Constructor
====================================================================================================================================================
PC  |   OPCODE  |   Mnemonic        |   Stack [top, bottom]                 | Comments
----------------------------------------------------------------------------------------------------------------------------------------------------
1   |   60 XX   |   PUSH1 XX        |   [X]                                 | Size of runtime code
3   |   3D      |   RETURNDATASIZE  |   [0, X]                              | Before any external call, returdatasize = 0 (cheaper than PUSH1 00)
4   |   81      |   DUP2            |   [X, 0, X]                           |
5   |   60 09   |   PUSH1 09        |   [9, X, 0, X]                        |
7   |   3D      |   RETURNDATASIZE  |   [0, 9, X, 0, X]                     | 
8   |   39      |   CODECOPY        |   [0, X]                              | Mem[0:X-1] = address(this).code[9:9+X-1]
9   |   F3      |   RETURN          |   []                                  | return Mem[0:XX-1]                   

====================================================================================================================================================
                                                    Runtime Code
====================================================================================================================================================
PC  |   OPCODE  |   Mnemonic        |   Stack [top, bottom]                 | Comments
----------------------------------------------------------------------------------------------------------------------------------
1   |   60 04   |   PUSH1 04        |   [4]                                 |
3   |   36      |   CALLDATASIZE    |   [msg.data.size, 4]                  |
4   |   10      |   LT              |   [msg.data.size < 4]                 |
5   |   60 16   |   PUSH1 16        |   [22, msg.data.size < 4]             |
7   |   57      |   JUMPI           |   []                                  | if(msg.data.size < 4) Jump to PC=22 (delegate to forwarder to handle)
8   |   3D      |   RETURNDATASIZE  |   [0]                                 |
9   |   35      |   CALLDATALOAD    |   [msg.data[0:31]]                    | First 32 bytes of msg.data
10  |   60 E0   |   PUSH1 E0        |   [224, msg.data[0:31]]               |
12  |   1C      |   SHR             |   [funcSig]                           | Stay with the first 4 bytes (function signature) funcSig = msg.data[0:3])
13  |   63      |   PUSH4           |   [initSig, funcSig]                  | initSig = 3522525332 the selector of initialize function
    |   D1F57894|   D1F57894        |
18  |   14      |   EQ              |   [initSig == funcSig]                |
19  |   60 43   |   PUSH1 43        |   [67, initSig == funcSig]            |
21  |   57      |   JUMPI           |   []                                  | if(initSig == funcSig) then jump to PC=67 where the initialize logic is located, else continue
22  |   5B      |   JUMPDEST        |   []                                  | Start of delegate code
23  |   36      |   CALLDATASIZE    |   [msg.data.size]                     |
24  |   3D      |   RETURNDATASIZE  |   [0, msg.data.size]                  |
25  |   3D      |   RETURNDATASIZE  |   [0, 0, msg.data.size]               |
26  |   37      |   CALLDATACOPY    |   []                                  | Mem[0:msg.data.size-1] = msg.data[0:msg.data.size-1]
27  |   3D      |   RETURNDATASIZE  |   [0]                                 |
28  |   3D      |   RETURNDATASIZE  |   [0, 0]                              |
29  |   3D      |   RETURNDATASIZE  |   [0, 0, 0]                           |
30  |   3D      |   RETURNDATASIZE  |   [0, 0, 0, 0]                        |
31  |   36      |   CALLDATASIZE    |   [msg.data.size, 0, 0, 0, 0]         |
32  |   3D      |   RETURNDATASIZE  |   [0, msg.data.size, 0, 0, 0, 0]      |
33  |   73  MC  |   PUSH20 MC       |   [mcAddr,0, msg.data.size,           | mcAddr = address of master Copy, injected by factory
                                    |   0, 0, 0, 0 ]                        |
54  |   5A      |   GAS             |   [rGas, mcAddr,0, msg.data.size,     | rGas = remaining gas
                                    |   0, 0, 0, 0 ]                        |
55  |   F4      |   DELEGATECALL    |   [isSuccess, 0, 0]                   | isSuccess, Mem[0:0] = address(mcAddr).delegateCall.gas(rGas)(Mem[0:msg.data.size-1])
56  |   3D      |   RETURNDATASIZE  |   [rds, isSuccess, 0, 0]              | rds = size of what the logic called returned
57  |   92      |   SWAP3           |   [0, isSuccess, 0, rds]              |
58  |   3D      |   RETURNDATASIZE  |   [rds, 0, isSuccess, 0, rds]         |
59  |   90      |   SWAP1           |   [0, rds, isSuccess, 0, rds]         |
60  |   80      |   DUP1            |   [0, 0, rds, isSuccess, 0, rds]      |
61  |   3E      |   RETURNDATACOPY  |   [isSuccess, 0, rds]                 | Mem[0:rds-1] = RETURNDATA[0:rds-1]
62  |   60 41   |   PUSH1 41        |   [65, isSuccess, 0, rds]             |
63  |   57      |   JUMPI           |   [0, rds]                            | if(isSuccess) then jump to PC=65
64  |   FD      |   REVERT          |   []                                  | revert(Mem[0, rds-1])
65  |   5B      |   JUMPDEST        |   [0, rds]                            |
66  |   F3      |   RETURN          |   []                                  | return(Mem[0, rds-1])
67  |   5B      |   JUMPDEST        |   []                                  | --------Start of initialize code---------
68  |   3D      |   RETURNDATASIZE  |   [0]                                 |
69  |   54      |   SLOAD           |   [initialized]                       | initialized = Strg[0] = 256bit word, but can only be either 1 or 0
70  |   15      |   ISZERO          |   [notInitialized]                    | notInitialized = (initialized == 0)
71  |   60 4B   |   PUSH1 4B        |   [75, notInitialized]                | Load the PC to go if not initialized
73  |   57      |   JUMPI           |   []                                  | if (notInitialized) then jump to PC = 75 else continue
74  |   00      |   STOP            |   []                                  | Already initialized, return with no returndata
75  |   5B      |   JUMPDEST        |   []                                  | Beginning of initialization logic
76  |   60 04   |   PUSH1 04        |   [4]                                 | The first 24 bytes (msg.data[0:23]) are the initialize function signature and tokenAddr
78  |   35      |   CALLDATALOAD    |   [msg.data[4:35]]                    | A 256-bit word after the initialize function signature
79  |   60 60   |   PUSH1 60        |   [96, msg.data[4:35]]                | I need the number in msg.data[4:23] which is a 160-bit address
81  |   1C      |   SHR             |   [tokenAddr]                         | from [tokenAddr|96bits], stay with the first 160 bits of the Word (Logical shift right)
82  |   3D      |   RETURNDATASIZE  |   [0, tokenAddr]                      | retLength
83  |   3D      |   RETURNDATASIZE  |   [0, 0, tokenAddr]                   | retOffset
84  |   60 38   |   PUSH1 38        |   [56, 0, 0, tokenAddr]               | argsLength = transferSig(4) + recipient(20) + amount(32) = 56 bytes = 0x38
86  |   60 18   |   PUSH1 18        |   [24, 56, 0, 0, tokenAddr]           | argsOffset  [initSig(4)|tokenAddr(20)|data(56)] => argsOffset = 24
88  |   81      |   DUP2            |   [56, 24, 56, 0, 0, tokenAddr]       |
89  |   81          DUP2            |   [24, 56, 24, 56, 0, 0, tokenAddr]   | 
90  |   3D      |   RETURNDATASIZE  |   [0, 24, 56, 24, 56, 0, 0, tokenAddr]|
91  |   37      |   CALLDATACOPY    |   [24, 56, 0, 0, tokenAddr]           | Mem[0:55] = msg.data[24:79]  (data for transfer call)
92  |   3D      |   RETURNDATASIZE  |   [0, 24, 56, 0, 0, tokenAddr]        | value (wei to send)
93  |   3D      |   RETURNDATASIZE  |   [0, 0, 24, 56, 0, 0, tokenAddr]     |
94  |   95      |   SWAP6           |   [tokenAddr, 0, 24, 56, 0, 0, 0]     |       
95  |   5A      |   GAS             |   [rGas,tokenAddr, 0, 24, 56, 0, 0, 0]| rGas = remaining gas
96  |   F1      |   CALL            |   [isSuccess, 0]                      | isSuccess, Mem[0:0] = address(tokenAddr).call.gas(rGas).value(0)(Mem[24:55])
97  |   60 68   |   PUSH1 68        |   [104, isSuccess]                    | PC to jump if transfer (the call) succeeded
99  |   57      |   JUMPI           |   []                                  | if(isSuccess) then Jump to PC = 104 else continue
100 |   60 00   |   PUSH1 00        |   [0]                                 | RETURNDATASIZE might not be zero so we cannot use it
102 |   80      |   DUP1            |   [0, 0]                              | Skipping returning the reason of failure in the transfer
103 |   FD      |   REVERT          |   []                                  | revert(0, 0) //Transfer failed, cannot deploy proxy
104 |   5B      |   JUMPDEST        |   []                                  | transfer succeeded, so put initialized as true
105 |   60 01   |   PUSH1 01        |   [1]                                 | value = 0x01
107 |   60 00   |   PUSH1 00        |   [0, 1]                              | key = 0x00
109 |   55      |   SSTORE          |   []                                  | Strg[0] = 1 (as 32-byte word) (initialized = true)
110 |   00      |   STOP            |   []                                  | return from initialize function without return data 
  


    }
*/